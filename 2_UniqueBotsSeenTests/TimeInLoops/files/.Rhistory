} else {
ID[i] <- NA
t[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
i <- i + 1
k <- k + 5
}
(m.df$V1[k]
k <-1
m.df$V1[k]
new.list <- list()
ID <- vector()
t <- vector()
cycle <- vector()
bots_seen <- vector()
BotDistance <- vector()
k <- 1
i <- 1
while((k %% 5  == 1) & (i < length(m.df$V1)-5)){
#for(i in 1:(length(m.df$V1)-5)){
print(i)
if(m.df$V1[k] == "ID" & m.df$V1[k+1] == "t" & m.df$V1[k+2] == "cycle" & m.df$V1[k+3] == "bots_seen" & m.df$V1[k+4]== "BotDistance"){
ID[i] <- m.df$V2[k]
t[i] <- m.df$V2[k+1]
cycle[i] <- m.df$V2[k+2]
bots_seen[i] <- m.df$V2[k+3]
BotDistance[i] <- m.df$V2[k + 4]
i <- i + 1
k <- k + 5
} else {
ID[i] <- NA
t[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
i <- i + 1
k <- k + 5
}
}
new.df <- data.frame(ID= as.numeric(ID), t = as.numeric(t), cycle= as.numeric(cycle),  bots_seen = as.numeric(bots_seen), BotDistance = as.numeric(BotDistance))
View(new.df)
View(m.df)
View(m.df)
i <- 1
print(i)
ID[i] <- m.df$V2[i]
new.list <- list()
ID <- vector()
t <- vector()
cycle <- vector()
bots_seen <- vector()
BotDistance <- vector()
k <- 1
i <- 1
print(i)
ID[i] <- m.df$V2[i]
t[i] <- m.df$V2[i+1]
cycle[i] <- m.df$V2[i+2]
bots_seen[i] <- m.df$V2[i+3]
i <- 2
ID[i] <- m.df$V2[i]
View(m.df)
unique(m.df$V1)
new.list <- list()
ID <- vector()
t <- vector()
cycle <- vector()
bots_seen <- vector()
BotDistance <- vector()
k <- 1
i <- 1
#while((k %% 5  == 1) & (i < length(m.df$V1)-5)){
for(i in 1:(length(m.df$V1)-5)){
print(i)
if(m.df$V1[i] == "ID" & m.df$V1[i+1] == "t" & m.df$V1[i+2] == "cycle" & m.df$V1[i+3] == "bots_seen" & m.df$V1[i+4]== "BotDistance"){
ID[i] <- m.df$V2[i]
t[i] <- m.df$V2[i+1]
cycle[i] <- m.df$V2[i+2]
bots_seen[i] <- m.df$V2[i+3]
BotDistance[i] <- m.df$V2[i + 4]
} else {
ID[i] <- NA
t[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
}
}
new.df <- data.frame(ID= as.numeric(ID), t = as.numeric(t), cycle= as.numeric(cycle),  bots_seen = as.numeric(bots_seen), BotDistance = as.numeric(BotDistance))
View(new.df)
new.df <- drop_na(new.df)
new.df <- new.df %>% group_by(ID, cycle) %>% mutate(time = row_number())
new.df <- new.df %>% select(!BotDistance)
new.df <- filter(new.df, t > 0)
tpercycle.df <- new.df %>% group_by(ID, cycle) %>% summarise(t.sum = n())
View(tpercycle.df)
View(new.df)
test <- filter(m.df, cycle == 3)
test <- filter(m.df, V2 == 3)
View(test)
View(m.df)
library(stringr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
library(ggthemes)
setwd("~/MEGA/KilobotsNestSelection/2_UniqueBotsSeenTests/TimeInLoops/files/")
files <- list.files(pattern = "*time_*")
df.list <- list()
for(i in 1:length(files)){
df <- read.csv(files[i], header = FALSE, sep = ":")
df$dt <- str_extract(files[i], "400|800|1600")
df <- df %>% filter(V1 != "bot_id" & V1 != "signals_total")
df.list[[i]] <- df
}
m.df <- as.data.frame(do.call("rbind", df.list))
unique(m.df$V1)
new.list <- list()
ID <- vector()
t <- vector()
cycle <- vector()
bots_seen <- vector()
BotDistance <- vector()
k <- 1
i <- 1
#while((k %% 5  == 1) & (i < length(m.df$V1)-5)){
for(i in 1:(length(m.df$V1)-5)){
print(i)
if(m.df$V1[i] == "ID" & m.df$V1[i+1] == "t" & m.df$V1[i+2] == "cycle" & m.df$V1[i+3] == "bots_seen" & m.df$V1[i+4]== "BotDistance"){
ID[i] <- m.df$V2[i]
t[i] <- m.df$V2[i+1]
cycle[i] <- m.df$V2[i+2]
bots_seen[i] <- m.df$V2[i+3]
BotDistance[i] <- m.df$V2[i + 4]
} else {
ID[i] <- NA
t[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
}
}
new.df <- data.frame(ID= as.numeric(ID), t = as.numeric(t), cycle= as.numeric(cycle),  bots_seen = as.numeric(bots_seen), BotDistance = as.numeric(BotDistance))
new.df <- drop_na(new.df)
new.df <- new.df %>% group_by(ID, cycle) %>% mutate(time = row_number())
new.df <- new.df %>% select(!BotDistance)
new.df <- filter(new.df, t > 0)
# Mean bots seen per cycle
BSmean.df <- new.df %>% ungroup() %>% filter(cycle > 2) %>% summarise(BS_IDmean = mean(bots_seen), BS_IDsd = sd(bots_seen)) %>% ggplot() +
geom_line(aes(x = cycle, y = as.numeric(BS_IDmean)), size = 1)
<- new.df %>% ungroup() %>% filter(cycle > 2) %>% summarise(BS_IDmean = mean(bots_seen), BS_IDsd = sd(bots_seen)) %>% ggplot() +
# Mean bots seen per cycle
BSmean.df <- new.df %>% ungroup() %>% filter(cycle > 2) %>% summarise(BS_IDmean = mean(bots_seen), BS_IDsd = sd(bots_seen))
BSmean.df
# Mean bots seen per cycle
BSmean.df <- new.df %>% group_by(ID) %>% filter(cycle > 2) %>% summarise(BS_IDmean = mean(bots_seen), BS_IDsd = sd(bots_seen))
BSmean.df
BSmean.plot <- BSmean.df %>% ggplot()+ geom_bar(aes(x = ID, y = BS_IDmean))
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot()+ geom_bar(aes(x = as.factor(ID), y = BS_IDmean))
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot()+ geom_bar(aes(y = BS_IDmean))
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot()+ geom_bar(aes(x = as.factor(ID), y = BS_IDmean),position=position_dodge(), stat="identity")
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot()+ geom_bar(aes(x = as.factor(ID), y = BS_IDmean),position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd))
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd))
BSmean.df <- new.df %>% group_by(ID) %>% filter(cycle > 2) %>% summarise(BS_IDmean = mean(bots_seen), BS_IDsd = sd(bots_seen))
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "violet") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd)) +
# time passed in each cycle
mmean.df <- m.df %>% group_by(ID) %>% filter(Counter >= 1000 & Counter <= 3000) %>% group_by(Counter, neighbors) %>%
summarise(MeanMessages = mean(MessagesReceived)) %>% group_by(neighbors) %>%
mutate(Counter = Counter - Counter[1], MeanMessages = MeanMessages - MeanMessages[1]) %>%
group_by(Counter, neighbors) %>% mutate(MeanMessagesPerNeighbor = MeanMessages/as.numeric(neighbors))
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "violet") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd))
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "violet") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd))+
theme_few()
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "darkpurple") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd))+
theme_few()
BSmean.plot
colors()
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "turquoise3") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd))+
theme_few()
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "turquoise4") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd))+
theme_few()
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "turquoise4") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd), width = 0.2, color = "yellow")+
theme_few()
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "turquoise4") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd), width = 0.2, color = "orange")+
theme_few()
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "turquoise4") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd), width = 0.2, color = "orange")+
theme_few() +
labs(x = "Center bot ID", y = expression("Mean Bots Seen per cycle (800"Delta*"t"))
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "turquoise4") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd), width = 0.2, color = "orange")+
theme_few() +
labs(x = "Center bot ID", y = expression("Mean Bots Seen per cycle (800"*Delta*"t"))
BSmean.plot
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "turquoise4") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd), width = 0.2, color = "orange")+
theme_few() +
labs(x = "Center bot ID", y = expression("Mean Bots Seen per cycle (800"*Delta*"t)"))
BSmean.plot <- BSmean.df %>% ggplot(aes(x = as.factor(ID)))+ geom_bar(aes(y = BS_IDmean),position=position_dodge(), stat="identity", fill = "turquoise4") +
geom_errorbar(aes(ymin=BS_IDmean - BS_IDsd, ymax = BS_IDmean + BS_IDsd), width = 0.2, color = "orange")+
theme_few() +
labs(x = "Center bot ID", y = expression("Mean Bots Seen per Cycle (800"*Delta*"t)"))
BSmean.plot
ggsave("MeanBotsSeenPerIDInCycle.png", width = 6, height = 2, units = "in")
ggsave("MeanBotsSeenPerIDInCycle.png", width = 10, height = 4, units = "in")
files <- list.files(pattern = "*progressive_*")
df.list <- list()
for(i in 1:length(files)){
df <- read.csv(files[i], header = FALSE, sep = ":")
df$dt <- str_extract(files[i], "400|800|1600")
df <- df %>% filter(V1 != "bot_id" & V1 != "signals_total")
df.list[[i]] <- df
}
m.df <- as.data.frame(do.call("rbind", df.list))
unique(m.df$V1)
for(i in 1:(length(m.df$V1)-5)){
print(i)
if(m.df$V1[i] == "ID" & m.df$V1[i+1] == "cycle" & m.df$V1[i+2] == "bots_seen" & m.df$V1[i+3]== "BotDistance"){
ID[i] <- m.df$V2[i]
cycle[i] <- m.df$V2[i+1]
bots_seen[i] <- m.df$V2[i+2]
BotDistance[i] <- m.df$V2[i + 3]
} else {
ID[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
}
}
progress.df <- drop_na(progress.df)
progress.df <- data.frame(ID= as.numeric(ID), t = as.numeric(t), cycle= as.numeric(cycle),  bots_seen = as.numeric(bots_seen), BotDistance = as.numeric(BotDistance))
progress.df <- drop_na(progress.df)
progress.df <- data.frame(ID= as.numeric(ID),  cycle= as.numeric(cycle),  bots_seen = as.numeric(bots_seen), BotDistance = as.numeric(BotDistance))
View(progress.df)
progress.df <- drop_na(progress.df)
progress.df <- progress.df %>% group_by(ID, cycle) %>% mutate(time = row_number())
bst.df <- as.data.frame(do.call("rbind", df.list))
unique(bst.df$V1)
new.list <- list()
ID <- vector()
cycle <- vector()
bots_seen <- vector()
BotDistance <- vector()
for(i in 1:(length(bst.df$V1)-5)){
print(i)
if(m.df$V1[i] == "ID" & m.df$V1[i+1] == "cycle" & m.df$V1[i+2] == "bots_seen" & m.df$V1[i+3]== "BotDistance"){
ID[i] <- m.df$V2[i]
cycle[i] <- m.df$V2[i+1]
bots_seen[i] <- m.df$V2[i+2]
BotDistance[i] <- m.df$V2[i + 3]
} else {
ID[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
}
}
new.list <- list()
ID <- vector()
cycle <- vector()
bots_seen <- vector()
BotDistance <- vector()
for(i in 1:(length(bst.df$V1)-5)){
print(i)
if(bst.df$V1[i] == "ID" & bst.df$V1[i+1] == "cycle" & bst.df$V1[i+2] == "bots_seen" & bst.df$V1[i+3]== "BotDistance"){
ID[i] <- m.df$V2[i]
cycle[i] <- m.df$V2[i+1]
bots_seen[i] <- m.df$V2[i+2]
BotDistance[i] <- m.df$V2[i + 3]
} else {
ID[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
}
}
for(i in 1:(length(bst.df$V1)-5)){
print(i)
if(bst.df$V1[i] == "ID" & bst.df$V1[i+1] == "cycle" & bst.df$V1[i+2] == "bots_seen" & bst.df$V1[i+3]== "BotDistance"){
ID[i] <- bst.df$V2[i]
cycle[i] <- bst.df$V2[i+1]
bots_seen[i] <- bst.df$V2[i+2]
BotDistance[i] <- bst.df$V2[i + 3]
} else {
ID[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
}
}
new.list <- list()
ID <- vector()
cycle <- vector()
bots_seen <- vector()
BotDistance <- vector()
for(i in 1:(length(bst.df$V1)-5)){
print(i)
if(bst.df$V1[i] == "ID" & bst.df$V1[i+1] == "cycle" & bst.df$V1[i+2] == "bots_seen" & bst.df$V1[i+3]== "BotDistance"){
ID[i] <- bst.df$V2[i]
cycle[i] <- bst.df$V2[i+1]
bots_seen[i] <- bst.df$V2[i+2]
BotDistance[i] <- bst.df$V2[i + 3]
} else {
ID[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
}
}
progress.df <- data.frame(ID= as.numeric(ID),  cycle= as.numeric(cycle),  bots_seen = as.numeric(bots_seen), BotDistance = as.numeric(BotDistance))
progress.df <- drop_na(progress.df)
progress.df <- progress.df %>% group_by(ID, cycle) %>% mutate(time = row_number())
View(bst.df)
setwd("~/MEGA/KilobotsNestSelection/2_UniqueBotsSeenTests/TimeInLoops/files/")
files <- list.files(pattern = "*time_*")
df.list <- list()
for(i in 1:length(files)){
df <- read.csv(files[i], header = FALSE, sep = ":")
df$dt <- str_extract(files[i], "400|800|1600")
df <- df %>% filter(V1 != "bot_id")
df.list[[i]] <- df
}
m.df <- as.data.frame(do.call("rbind", df.list))
View(m.df)
unique(m.df$V1)
new.list <- list()
ID <- vector()
t <- vector()
cycle <- vector()
bots_seen <- vector()
BotDistance <- vector()
signals_total <- vector()
k <- 1
i <- 1
#while((k %% 5  == 1) & (i < length(m.df$V1)-5)){
for(i in 1:(length(m.df$V1)-6)){
print(i)
if(m.df$V1[i] == "ID" & m.df$V1[i+1] == "t" & m.df$V1[i+2] == "cycle" & m.df$V1[i+3] == "bots_seen" & m.df$V1[i+4]== "BotDistance" &  m.df$V1[i+5]== "signals_total"){
ID[i] <- m.df$V2[i]
t[i] <- m.df$V2[i+1]
cycle[i] <- m.df$V2[i+2]
bots_seen[i] <- m.df$V2[i+3]
BotDistance[i] <- m.df$V2[i + 4]
signals_total[i] <- m.df$V2[i + 5]
} else {
ID[i] <- NA
t[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
}
}
new.list <- list()
ID <- vector()
t <- vector()
cycle <- vector()
bots_seen <- vector()
BotDistance <- vector()
signals_total <- vector()
#while((k %% 5  == 1) & (i < length(m.df$V1)-5)){
for(i in 1:(length(m.df$V1)-6)){
print(i)
if(m.df$V1[i] == "ID" & m.df$V1[i+1] == "t" & m.df$V1[i+2] == "cycle" & m.df$V1[i+3] == "bots_seen" & m.df$V1[i+4]== "BotDistance" &  m.df$V1[i+5]== "signals_total"){
ID[i] <- m.df$V2[i]
t[i] <- m.df$V2[i+1]
cycle[i] <- m.df$V2[i+2]
bots_seen[i] <- m.df$V2[i+3]
BotDistance[i] <- m.df$V2[i + 4]
signals_total[i] <- m.df$V2[i + 5]
} else {
ID[i] <- NA
t[i] <- NA
cycle[i] <- NA
bots_seen[i] <- NA
BotDistance[i] <- NA
signals_total[i] <- NA
}
}
new.df <- data.frame(ID= as.numeric(ID), t = as.numeric(t), cycle= as.numeric(cycle),  bots_seen = as.numeric(bots_seen), BotDistance = as.numeric(BotDistance),  signals_total = as.numeric(signals_total))
new.df <- drop_na(new.df)
new.df <- new.df %>% group_by(ID, cycle) %>% mutate(time = row_number())
new.df <- new.df %>% select(!BotDistance)
new.df <- filter(new.df, t > 0)
BStime.df <- new.df %>% ggplot(aes(x = t, y = signals_total, color = interaction(ID,cycle)))
BStime.df <- new.df %>% ggplot(aes(x = t, y = signals_total, color = interaction(ID,cycle))) + geom_line()<
# ---- Load data without time column ----
files <- list.files(pattern = "*progressive_*")
BStime.df <- new.df %>% ggplot(aes(x = t, y = signals_total, color = interaction(ID,cycle))) + geom_line()
BStime.df
BStime.df <- new.df %>%
ggplot(aes(x = t, y = signals_total, color = cycle)) + geom_line()`+
facet_wrap(.~ID)
BStime.df
BStime.df <- new.df %>%
ggplot(aes(x = t, y = signals_total, color = cycle)) + geom_line() +
facet_wrap(.~ID)
BStime.df <- new.df %>%
ggplot(aes(x = t, y = signals_total, color = cycle)) + geom_line() +
facet_wrap(.~ID)
BStime.df
BStime.df <- new.df %>%
ggplot(aes(x = t, y = signals_total, color = as.factor(cycle))) + geom_line() +
facet_wrap(.~ID)
BStime.df
BStime.df <- new.df %>%
ggplot(aes(x = time, y = signals_total, color = as.factor(cycle))) + geom_line() +
facet_wrap(.~ID)
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line()
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
scale_x_continuous(trans = "log10")
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
theme_few()+
scale_x_continuous(trans = "log10")
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
theme_few()+
scale_x_continuous(trans = "log10") +
scale_y_continuous(breaks = seq(0, 30, 5))
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
geom_ribbon(aes(ymin = BS_CycleMean - BS_CycleSD, ymax = BS_CycleMean + BS_CycleSD))
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
geom_ribbon(aes(ymin = BS_CycleMean - BS_CycleSD, ymax = BS_CycleMean + BS_CycleSD))+
theme_few()+
scale_x_continuous(trans = "log10") +
scale_y_continuous(breaks = seq(0, 30, 5))
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
geom_ribbon(aes(ymin = BS_CycleMean - BS_CycleSD, ymax = BS_CycleMean + BS_CycleSD, fill = as.factor(ID)))+
theme_few()+
scale_x_continuous(trans = "log10") +
scale_y_continuous(breaks = seq(0, 30, 5))
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
geom_ribbon(aes(ymin = BS_CycleMean - BS_CycleSD, ymax = BS_CycleMean + BS_CycleSD, fill = as.factor(ID)), alpha = 0.5)+
theme_few()+
scale_x_continuous(trans = "log10") +
scale_y_continuous(breaks = seq(0, 30, 5))
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
geom_ribbon(aes(ymin = BS_CycleMean - BS_CycleSD, ymax = BS_CycleMean + BS_CycleSD, fill = as.factor(ID)), alpha = 0.5, color= "transparent")+
theme_few()+
scale_x_continuous(trans = "log10") +
scale_y_continuous(breaks = seq(0, 30, 5))
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
geom_ribbon(aes(ymin = BS_CycleMean - BS_CycleSD, ymax = BS_CycleMean + BS_CycleSD, fill = as.factor(ID)), alpha = 0.3, color= "transparent")+
theme_few()+
scale_x_continuous(trans = "log10") +
scale_y_continuous(breaks = seq(0, 30, 5))
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
geom_ribbon(aes(ymin = BS_CycleMean - BS_CycleSD, ymax = BS_CycleMean + BS_CycleSD, fill = as.factor(ID)), alpha = 0.3, color= "transparent")+
theme_few()+
scale_x_continuous(trans = "log10") +
scale_y_continuous(breaks = seq(0, 30, 5)) +
labs(x = "t (loops)", y = "Mean Bots Seen", color = "Center bot ID")
BStime.df
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
geom_ribbon(aes(ymin = BS_CycleMean - BS_CycleSD, ymax = BS_CycleMean + BS_CycleSD, fill = as.factor(ID)), alpha = 0.3, color= "transparent")+
theme_few()+
scale_x_continuous(trans = "log10") +
scale_y_continuous(breaks = seq(0, 30, 5)) +
labs(x = "t (loops)", y = "Mean Bots Seen", color = "Center bot ID",  fill = "Center bot ID")
BStime.df <- new.df %>% group_by(ID, time) %>%  summarise(BS_CycleMean = mean(signals_total), BS_CycleSD = sd(signals_total)) %>%
ggplot(aes(x = time, y =BS_CycleMean, color = as.factor(ID))) + geom_line() +
geom_ribbon(aes(ymin = BS_CycleMean - BS_CycleSD, ymax = BS_CycleMean + BS_CycleSD, fill = as.factor(ID)), alpha = 0.3, color= "transparent")+
theme_few()+
scale_x_continuous(trans = "log10") +
scale_y_continuous(breaks = seq(0, 30, 5)) +
labs(x = "t (loops)", y = "Mean Bots Seen", color = "Center bot ID",  fill = "Center bot ID")
BStime.df
ggsave("MeanBotsSeenPerIDinTime_semilog.png", width = 6, height = 4, units = "in")
